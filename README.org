* EventSim.jl
[[https://travis-ci.org/non-Jedi/EventSim.jl][https://travis-ci.org/non-Jedi/EventSim.jl.svg?branch=master]] [[https://coveralls.io/github/non-Jedi/EventSim.jl?branch=master][https://coveralls.io/repos/github/non-Jedi/EventSim.jl/badge.svg?branch=master]]

Sketch of an experiment to create a [[https://en.wikipedia.org/wiki/Discrete-event_simulation][Discrete-event simulation]] package
based on [[https://juliagizmos.github.io/Observables.jl/stable/][Observables.jl]]. This is in contrast to [[https://github.com/BenLauwens/SimJulia.jl][SimJulia.jl]], which
is based on [[https://github.com/BenLauwens/ResumableFunctions.jl][ResumableFunctions.jl]]. Reasons for this experiment
include:

- ResumableFunctions.jl is difficult to debug when errors are thrown.
- The API of SimJulia.jl has some rough edges that surprised me on
  first use.
- By basing the package on something less esoteric than
  ResumableFunctions.jl, better interop may be maintained with the
  rest of the Julia package ecosystem.

The downside of this approach is that you will not be able to create a
process that sequentially waits for a several other processes to
finish within a single logical Julia function. Instead, the actions to
be taken after each process finishes must be encoded as a single
logical function. As an example, with SimJulia.jl, you can write
something like the following:

#+begin_src julia
  @resumable function make_widget(env)
      @yield @process get_parts(env)
      @yield @process assemble_parts(env)
      @yield @process polish_widget(env)
  end#function
#+end_src

It's not clear that the same is possible with an Observables.jl-based
approach. Instead, each of ~get_parts~, ~assemble_parts~, and
~polish_widget~ may need to be individually chained off the previous step.

** TODO Status

- [X] Implement a doubly-linked list for the calendar
- [X] Make sure [[https://github.com/JuliaGizmos/Observables.jl/issues/1][observables won't be garbage-collected prematurely]] in
  the planned design.
- [-] Functions/macros for scheduling an event
  - [X] Callbacks need to have simulation object passed to them rather
    than being simple thunks.
  - [ ] forward Observables.jl ~on~ methods when called with ~Event~
    types.
  - [ ] Reread SimJulia.jl docs to see if any other times you'd want
    to attach a callback.
- [ ] Come up with gameplan for modeling breakdowns without having to
  design it into the system from the start.
- [X] Run a simulation.
- [ ] Types representing scarce resources
- [ ] Documentation
  - [ ] Write-up example simulations
  - [ ] Host documentation somewhere other than in README
- [ ] Register in [[https://github.com/JuliaRegistries/General/][General registry]].
- [ ] Benchmark against [[https://github.com/ChrisRackauckas/LinkedLists.jl][LinkedLists.jl]].
  - [ ] If benchmarks are favorable, consider splitting my linked list
    implementation into its own package or contributing the
    implementation to LinkedLists.jl.
